
# ======================================================
# 1. Установить докер, если не установлен (пример для Ubuntu)
# ======================================================

sudo apt-get update
sudo apt-get -y install \
	ca-certificates \
	curl \
	gnupg \
	lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
	"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

sudo apt-get update

sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin


# ======================================================
# 2. Скачать образ Ubuntu 22 и запустить контейнер
# ======================================================

docker pull ubuntu:22.04

echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

docker run --cap-add=SYS_PTRACE \
	-it --name my_ubuntu_container ubuntu:22.04 /bin/bash

# docker start my_ubuntu_container

# ======================================================
# 3. Установить необходимые для сборки пакеты
# ======================================================

DEBIAN_FRONTEND=noninteractive

apt-get update

apt-get install -y \
	jq git tree nano vim gdb \
	build-essential cpanminus slapd ldap-utils libldap2-dev \
	autoconf bison clang-11 devscripts dpkg-dev flex \
	libldap2-dev libdbi-perl libgssapi-krb5-2 libicu-dev \
	krb5-kdc krb5-admin-server libssl-dev libpam0g-dev \
	libkrb5-dev krb5-user libcurl4-openssl-dev \
	perl perl-modules libipc-run-perl libtest-simple-perl libtime-hires-perl \
	liblz4-dev libpam-dev libreadline-dev libselinux1-dev libsystemd-dev \
	libxml2-dev libxslt-dev libzstd-dev llvm-11-dev locales-all pkg-config \
	python3-dev uuid-dev zlib1g-dev \
    openjade docbook-xml docbook-xsl opensp libxml2-utils xsltproc \
    libjson-perl curl time


# ======================================================
# 4. Создать группу postgres и одноименного пользователя
# ======================================================

groupadd -r postgres
useradd -r -g postgres -d /var/lib/postgresql -s /bin/bash postgres
mkdir -p /var/lib/postgresql
chown postgres:postgres /var/lib/postgresql
chmod 700 /var/lib/postgresql
mkdir -p /var/run/postgresql
chown postgres:postgres /var/run/postgresql

mkdir -p /var/log/postgresql
chown postgres:postgres /var/log/postgresql


mkdir -p /usr/local/pgsql
chown postgres:postgres /usr/local/pgsql


# ======================================================
# 5. Под пользователем postgres приступить к клониванию
# и сборке исходного кода
# ======================================================

su - postgres

git clone -b REL_16_STABLE https://github.com/postgres/postgres postgres_src
cd postgres_src/

./configure --prefix=/usr/local/pgsql \
	--enable-tap-tests \
	--with-python \
	--with-icu \
	--with-lz4 \
	--with-zstd \
	--enable-debug \
	--enable-cassert

make -j 4
make install

# ======================================================
# 6. Инициализация и запуск БД
# ======================================================

mkdir /var/lib/postgresql/my_data

/usr/local/pgsql/bin/initdb \
	-D /var/lib/postgresql/my_data


cat >> /var/lib/postgresql/my_data/postgresql.conf << EOL
logging_collector = on
log_directory = '/var/log/postgresql'
log_statement = 'all'
log_min_messages = debug1
log_duration = on
log_filename = 'postgresql.log'
log_destination = 'csvlog'
log_error_verbosity = verbose
log_lock_waits = on
EOL

/usr/local/pgsql/bin/pg_ctl \
	-D /var/lib/postgresql/my_data \
	start


ps f --forest -u postgres | grep -v "f --forest -u postgres"

tail -f /var/log/postgresql/postgresql.csv

/usr/local/pgsql/bin/psql -c 'select pg_sleep(30)'

# su - postgres -c "/usr/local/pgsql/bin/psql -c 'select pg_sleep(30)'"

/usr/local/pgsql/bin/pg_ctl \
	-D /var/lib/postgresql/my_data \
	stop


# ======================================================
# 7. Создание новой функции
# ======================================================

# Находясь в директории с исходном кодом
# cd /var/lib/postgresql/postgres_src

cat > src/backend/utils/adt/my_function.c << EOL
#include "postgres.h"

#include "utils/builtins.h"
#include "fmgr.h"
#include "utils/elog.h"

Datum
my_function(PG_FUNCTION_ARGS)
{
    int32 arg = PG_GETARG_INT32(0);

    elog(LOG, "Received argument: %d", arg);
    Assert(arg != 0);

    if (arg > 1)
        PG_RETURN_TEXT_P(cstring_to_text("success"));
    else
        PG_RETURN_NULL();
}
EOL

sed -i '/acl.o \\/i\\tmy_function.o \\' src/backend/utils/adt/Makefile

sed -i "/\]/i \\
{ oid => '7000', descr => 'teaching function',\\
  proname => 'my_function', provolatile => 's',\\
  prorettype => 'text', proargtypes => 'int4',\\
  prosrc => 'my_function' },\\
" src/include/catalog/pg_proc.dat


make -j 4
make install

rm -rf /var/lib/postgresql/my_data/*

/usr/local/pgsql/bin/initdb \
	-D /var/lib/postgresql/my_data


cat >> /var/lib/postgresql/my_data/postgresql.conf << EOL
logging_collector = on
log_directory = '/var/log/postgresql'
log_statement = 'all'
log_min_messages = debug1
log_duration = on
log_filename = 'postgresql.log'
log_destination = 'csvlog'
log_error_verbosity = verbose
log_lock_waits = on
EOL

/usr/local/pgsql/bin/pg_ctl \
	-D /var/lib/postgresql/my_data \
	start


/usr/local/pgsql/bin/psql -c 'select my_function(30)'
>>
	 my_function 
	-------------
	 success
	(1 row)


/usr/local/pgsql/bin/psql -c 'select my_function(0)'
>>
	server closed the connection unexpectedly
			This probably means the server terminated abnormally
			before or while processing the request.
	connection to server was lost


# ======================================================
# 8. Создание теста для my_function
# ======================================================

cat > src/test/regress/sql/my_test.sql << EOL
SELECT my_function(1);
SELECT my_function(2);
SELECT my_function(100);
EOL

cat > src/test/regress/expected/my_test.out << EOL
SELECT my_function(1);
 my_function 
-------------
 
(1 row)

SELECT my_function(2);
 my_function 
-------------
 success
(1 row)

SELECT my_function(100);
 my_function 
-------------
 success
(1 row)

EOL

sed -i '1itest: my_test' src/test/regress/parallel_schedule

make check -j 4
>>
	# +++ regress check in src/test/regress +++
	# using temp instance on port 61696 with PID 26274
	ok 1         - my_test                                    17 ms


# ======================================================
# 9. Точка останова
# ======================================================

# Открыть новую вкладку терминала для подключения
# к запущенному контейнеру

docker exec -it my_ubuntu_container /bin/bash
su - postgres

/usr/local/pgsql/bin/psql

select pg_backend_pid();
>>
	 pg_backend_pid 
	----------------
			  26445
	(1 row)


# В первой вкладке терминала

gdb -p 26445

(gdb) b my_function 
Breakpoint 1 at 0x55a520114260: file my_function.c, line 9.

(gdb) c
Continuing.

Breakpoint 1, my_function (fcinfo=0x55a520939f40) at my_function.c:9
9	{

(gdb) next
204		return (int32) X;

(gdb) next
10	    int32 arg = PG_GETARG_INT32(0);

(gdb) next
12	    elog(LOG, "Received argument: %d", arg);

(gdb) p arg
$1 = 4

(gdb) bt     
#0  my_function (fcinfo=0x55a520939f40) at my_function.c:12
#1  0x000055a51ff2e2aa in ExecInterpExpr (state=0x55a520939e68, econtext=0x55a520939b90, isnull=<optimized out>) at execExprInterp.c:758
#2  0x000055a51ff660d9 in ExecEvalExprSwitchContext (isNull=0x7fff5f373967, econtext=0x55a520939b90, state=0x55a520939e68)
    at ../../../src/include/executor/executor.h:355
#3  ExecProject (projInfo=0x55a520939e60) at ../../../src/include/executor/executor.h:389
#4  ExecResult (pstate=<optimized out>) at nodeResult.c:136
#5  0x000055a51ff321aa in ExecProcNode (node=0x55a520939a80) at ../../../src/include/executor/executor.h:273
#6  ExecutePlan (execute_once=<optimized out>, dest=0x55a520938000, direction=<optimized out>, numberTuples=0, sendTuples=<optimized out>, operation=CMD_SELECT, 
    use_parallel_mode=<optimized out>, planstate=0x55a520939a80, estate=0x55a520939858) at execMain.c:1670
#7  standard_ExecutorRun (queryDesc=0x55a520897b38, direction=<optimized out>, count=0, execute_once=<optimized out>) at execMain.c:365
#8  0x000055a5200f67af in PortalRunSelect (portal=0x55a5208e6d88, forward=<optimized out>, count=0, dest=<optimized out>) at pquery.c:924
#9  0x000055a5200f7e91 in PortalRun (portal=portal@entry=0x55a5208e6d88, count=count@entry=9223372036854775807, isTopLevel=isTopLevel@entry=true, 
    run_once=run_once@entry=true, dest=dest@entry=0x55a520938000, altdest=altdest@entry=0x55a520938000, qc=0x7fff5f373c00) at pquery.c:768
#10 0x000055a5200f3d64 in exec_simple_query (query_string=0x55a52086d778 "select  my_function(4);") at postgres.c:1274
#11 0x000055a5200f5909 in PostgresMain (dbname=<optimized out>, username=<optimized out>) at postgres.c:4637
#12 0x000055a52005d54f in BackendRun (port=0x55a52089bda0, port=0x55a52089bda0) at postmaster.c:4464
#13 BackendStartup (port=0x55a52089bda0) at postmaster.c:4192
#14 ServerLoop () at postmaster.c:1782
#15 0x000055a52005e573 in PostmasterMain (argc=argc@entry=3, argv=argv@entry=0x55a520869180) at postmaster.c:1466
#16 0x000055a51fd67dd1 in main (argc=3, argv=0x55a520869180) at main.c:198


q    => y

# ======================================================
# 10. Создание патча
# ======================================================

git status

git add src/backend/utils/adt/my_function.c
git add src/test/regress/expected/my_test.out
git add src/test/regress/sql/my_test.sql
git add src/backend/utils/adt/Makefile
git add src/include/catalog/pg_proc.dat
git add src/test/regress/parallel_schedule

git diff --cached

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

git commit -am "tmp local commit"

git format-patch -1 HEAD

cat 0001-tmp-local-commit.patch
>>
	From da58f605b698dc653782223a80d826d5f6cafe75 Mon Sep 17 00:00:00 2001
	From: Your Name <you@example.com>
	Date: Wed, 4 Oct 2023 00:40:39 +0200
	Subject: [PATCH] tmp local commit
	---
	 src/backend/utils/adt/Makefile        |  1 +
	 src/backend/utils/adt/my_function.c   | 19 +++++++++++++++++++
	 src/include/catalog/pg_proc.dat       |  5 +++++
	 src/test/regress/expected/my_test.out | 18 ++++++++++++++++++
	 src/test/regress/parallel_schedule    |  1 +
	 src/test/regress/sql/my_test.sql      |  3 +++

	...........


# ======================================================
# Готово
# ======================================================